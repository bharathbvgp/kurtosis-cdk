---
# Deployment parameters.
# The deployment process is divided into various stages.

# Deploy local L1.
deploy_l1: false

# Deploy zkevm contracts on L1 (and also fund accounts).
deploy_zkevm_contracts_on_l1: true

# Deploy zkevm node and cdk peripheral databases.
deploy_databases: true

# Deploy cdk central/trusted environment.
deploy_cdk_central_environment: true

# Deploy cdk/bridge infrastructure.
deploy_cdk_bridge_infra: true

# Deploy cdk-erigon node.
deploy_cdk_erigon_node: true

args:
  # Suffix appended to service names.
  # Note: It should be a string.
  deployment_suffix: "-001"

  # The global log level that all components of the stack should log at.
  # Valid values are "error", "warn", "info", "debug", and "trace".
  global_log_level: info

  # The type of the sequencer to deploy.
  # Options:
  # - 'erigon': Use the new sequencer (https://github.com/0xPolygonHermez/cdk-erigon).
  # - 'zkevm': Use the legacy sequencer (https://github.com/0xPolygonHermez/zkevm-node).
  sequencer_type: erigon

  # Deploy agglayer.
  deploy_agglayer: true

  # The type of data availability to use.
  # Options:
  # - 'rollup': Transaction data is stored on-chain on L1.
  # - 'cdk-validium': Transaction data is stored off-chain using the CDK DA layer and a DAC.
  # In the future, we would like to support external DA protocols such as Avail, Celestia and Near.
  data_availability_mode: rollup

  # Additional services to run alongside the network.
  # Options:
  # - arpeggio
  # - blockscout
  # - blutgang
  # - pless_zkevm_node
  # - prometheus_grafana
  # - tx_spammer
  additional_services: ["blockscout"]

  # Docker images and repositories used to spin up services.
  zkevm_prover_image: hermeznetwork/zkevm-prover:v6.0.3-RC20
  zkevm_node_image: hermeznetwork/zkevm-node:v0.7.0
  cdk_validium_node_image: 0xpolygon/cdk-validium-node:0.7.0-cdk
  cdk_node_image: ghcr.io/0xpolygon/cdk:0.0.16
  zkevm_da_image: 0xpolygon/cdk-data-availability:0.0.9
  zkevm_contracts_image: leovct/zkevm-contracts # the tag is automatically replaced by the value of /zkevm_rollup_fork_id/

  # zkevm_agglayer_image: 0xpolygon/agglayer:0.1.3
  zkevm_agglayer_image: ghcr.io/agglayer/agglayer-rs:main
  zkevm_bridge_service_image: hermeznetwork/zkevm-bridge-service:v0.5.0-RC10
  zkevm_bridge_ui_image: leovct/zkevm-bridge-ui:multi-network
  zkevm_bridge_proxy_image: haproxy:2.9.9-bookworm
  zkevm_sequence_sender_image: hermeznetwork/zkevm-sequence-sender:v0.2.0-RC4
  cdk_erigon_node_image: hermeznetwork/cdk-erigon:v2.0.0-beta18
  zkevm_pool_manager_image: hermeznetwork/zkevm-pool-manager:v0.1.0-RC1

  # Port configuration.
  zkevm_hash_db_port: 50061
  zkevm_executor_port: 50071
  zkevm_aggregator_port: 50081
  zkevm_pprof_port: 6060
  zkevm_prometheus_port: 9091
  zkevm_data_streamer_port: 6900
  zkevm_rpc_http_port: 8123
  zkevm_rpc_ws_port: 8133
  zkevm_bridge_rpc_port: 8080
  zkevm_bridge_grpc_port: 9090
  zkevm_bridge_ui_port: 80
  zkevm_agglayer_port: 4444
  zkevm_dac_port: 8484
  zkevm_pool_manager_port: 8545

  # Addresses and private keys of the different components.
  # They have been generated using the following command:
  # polycli wallet inspect --mnemonic 'lab code glass agree maid neutral vessel horror deny frequent favorite soft gate galaxy proof vintage once figure diary virtual scissors marble shrug drop' --addresses 9 | tee keys.txt | jq -r '.Addresses[] | [.ETHAddress, .HexPrivateKey] | @tsv' | awk 'BEGIN{split("sequencer,aggregator,claimtxmanager,timelock,admin,loadtest,agglayer,dac,proofsigner",roles,",")} {print "zkevm_l2_" roles[NR] "_address: \"" $1 "\""; print "zkevm_l2_" roles[NR] "_private_key: \"0x" $2 "\"\n"}'
  zkevm_l2_sequencer_address: "0xf6641BCbee9C111D82ca91fE98025dB33f77907d"
  zkevm_l2_sequencer_private_key: "0x22fad8943f6b0a49b9649729b33e7002b6ce296186d3888fb2c72cc01b488f8f"

  zkevm_l2_aggregator_address: "0x2f2712fCc0B463B854Da1cb594B843117afC6626"
  zkevm_l2_aggregator_private_key: "0x18ee92322259ebda12bab9f2a9265695b07c8a724df17d16a9a542e3920a81c3"

  zkevm_l2_claimtxmanager_address: "0x4b3fEEedE343209B14E97D5cB951755B6739E45E"
  zkevm_l2_claimtxmanager_private_key: "0xdc20b5bb7c7c312787fd7fd0d0bc15497c7786a453e768391ad481fb195aa406"

  zkevm_l2_timelock_address: "0x6711b087A9262856B15CAeB20eb6daB47cdf66b4"
  zkevm_l2_timelock_private_key: "0x0af7a778d852315b87093121c511aed9e2c48c72099820e6c6d755c19174ee88"

  zkevm_l2_admin_address: "0xB2f901B30bBd28392771D20C9BEED37Ca447b4d3"
  zkevm_l2_admin_private_key: "0x97c75054c2ef68d2a65af4cc98d83994fa9286723d8226b482994c294ceae9d5"

  zkevm_l2_loadtest_address: "0x5475282E70C514A538e9487Bac600a90E1774D8e"
  zkevm_l2_loadtest_private_key: "0xb80db5e39c9c0ffe4c46631c017211eba7a080fddf2d970b6a32a030c34150ca"

  zkevm_l2_agglayer_address: "0xBf7eF37b02df674D37d1d25Fdf1a861e18ED36A4"
  zkevm_l2_agglayer_private_key: "0x764ab054d3c02a1ebd6627aa0ec08c39bd3c276c542652e03b4160e96d09fc24"

  zkevm_l2_dac_address: "0xAf1253c84D0f1e656CABaA6FE20605D101CE3e19"
  zkevm_l2_dac_private_key: "0xbd8e0ee0f5b74a3c062d8381cfc73c79291c91b86bf862756d0a5da41098e2f5"

  zkevm_l2_proofsigner_address: "0x10c89ed3eeBBDaaD9AC437989bc92bEa659482a8"
  zkevm_l2_proofsigner_private_key: "0xc5e05ad2cc387d9ac86c00291c856fbdb598249368b380efb203e32fc426ad56"

  # Keystore password.
  zkevm_l2_keystore_password: pSnv6Dh5s9ahuzGzH9RoCDrKAMddaX3m

  ## L1 configuration.
  l1_chain_id: 11155111
  l1_preallocated_mnemonic: danger space large coin gloom strong cover gather lock home initial regular           
  l1_funding_amount: 3ether
  l1_rpc_url: https://eth-sepolia.g.alchemy.com/v2/DxcZ_thUfxPOadfylNPiHo7igT7lw1SP
  l1_ws_url: wss://eth-sepolia.g.alchemy.com/v2/DxcZ_thUfxPOadfylNPiHo7igT7lw1SP
  # https://github.com/ethpandaops/ethereum-package/tree/main?tab=readme-ov-file#configuration
  l1_additional_services: [
  # blockscout, # block explorer
  # dora, # beaconchain explorer
  # el_forkmon, # fork monitor tool
  ]
  l1_preset: minimal
  l1_seconds_per_slot: 1

  ## Rollup configuration.

  # The chain id of the new rollup.
  zkevm_rollup_chain_id: 10101

  # The rollupID of the CDK.
  zkevm_rollup_id: 1

  # The fork id of the new rollup. It indicates the prover (zkROM/executor) version.
  zkevm_rollup_fork_id: 9

  # If erigon is being used as the sequencer,
  # This flag will enable a stateless executor to verify the execution of the batches.
  erigon_strict_mode: true
  # This flag will allow pre EIP155 transactions.
  erigon_pre_eip155_transactions: true

  # The address of the rollup manager contract on L1.
  # If specified, the rollup data will be retrieved from this contract instead of using the contracts service.
  # zkevm_rollup_manager_address: ""
  # # The block number at which the rollup manager contract was deployed.
  # zkevm_rollup_manager_block_number: 0
  # # The address of the global exit root contract on L2.
  # zkevm_global_exit_root_l2_address: ""
  # # The address of the Polygon data committee contract on L1.
  # polygon_data_committee_address: ""

  polygon_zkevm_explorer: https://explorer.private/
  l1_explorer_url: https://sepolia.etherscan.io/

  # If this is true, we will automatically deploy an ERC20 contract on
  # L1 to be used at the gasTokenAddress
  zkevm_use_gas_token_contract: false

  ## Permissionless node configuration.
  trusted_sequencer_node_uri: zkevm-node-sequencer-001:6900
  zkevm_aggregator_host: zkevm-node-aggregator-001
  genesis_file: templates/permissionless-node/genesis.json
  