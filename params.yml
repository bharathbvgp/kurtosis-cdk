---
# Deployment parameters.
# The deployment process is divided into various stages.

# Deploy local L1.
deploy_l1: false

# Deploy zkevm contracts on L1 (and also fund accounts).
deploy_zkevm_contracts_on_l1: true

# Deploy zkevm node and cdk peripheral databases.
deploy_databases: true

# Deploy cdk central/trusted environment.
deploy_cdk_central_environment: true

# Deploy cdk/bridge infrastructure.
deploy_cdk_bridge_infra: true

# Deploy cdk-erigon node.
deploy_cdk_erigon_node: true

args:
  # Suffix appended to service names.
  # Note: It should be a string.
  deployment_suffix: "-001"

  # The type of the sequencer to deploy.
  # Options:
  # - 'erigon': Use the new sequencer (https://github.com/0xPolygonHermez/cdk-erigon).
  # - 'zkevm': Use the legacy sequencer (https://github.com/0xPolygonHermez/zkevm-node).
  sequencer_type: erigon

  # The type of data availability to use.
  # Options:
  # - 'rollup': Transaction data is stored on-chain on L1.
  # - 'cdk-validium': Transaction data is stored off-chain using the CDK DA layer and a DAC.
  # In the future, we would like to support external DA protocols such as Avail, Celestia and Near.
  data_availability_mode: cdk-validium

  # Additional services to run alongside the network.
  additional_services: []

  # Docker images and repositories used to spin up services.
  # zkevm_prover_image: hermeznetwork/zkevm-prover:v8.0.0-RC5-fork.12
  # zkevm_prover_image: hermeznetwork/zkevm-prover:v6.0.3-RC20
  zkevm_prover_image: hermeznetwork/zkevm-prover:v4.0.19

  zkevm_node_image: hermeznetwork/zkevm-node:v0.7.0
  cdk_validium_node_image: 0xpolygon/cdk-validium-node:0.7.0-cdk
  cdk_node_image: ghcr.io/0xpolygon/cdk:0.0.9

  zkevm_da_image: 0xpolygon/cdk-data-availability:0.0.7

  zkevm_contracts_image: leovct/zkevm-contracts # the tag is automatically replaced by the value of /zkevm_rollup_fork_id/

  # zkevm_agglayer_image: 0xpolygon/agglayer:0.1.3
  zkevm_agglayer_image: ghcr.io/agglayer/agglayer-rs:main
  # zkevm_bridge_service_image: hermeznetwork/zkevm-bridge-service:v0.4.2
  zkevm_bridge_service_image: hermeznetwork/zkevm-bridge-service:v0.4.2-RC2
  zkevm_bridge_ui_image: leovct/zkevm-bridge-ui:multi-network
  zkevm_bridge_proxy_image: haproxy:2.9.9-bookworm
  zkevm_sequence_sender_image: hermeznetwork/zkevm-sequence-sender:v0.2.0-RC4
  cdk_erigon_node_image: hermeznetwork/cdk-erigon:2.0.0-beta15
  toolbox_image: leovct/toolbox:0.0.2
  zkevm_pool_manager_image: hermeznetwork/zkevm-pool-manager:v0.1.0-RC1

  # Port configuration.
  zkevm_hash_db_port: 50061
  zkevm_executor_port: 50071
  zkevm_aggregator_port: 50081
  zkevm_pprof_port: 6060
  zkevm_prometheus_port: 9091
  zkevm_data_streamer_port: 6900
  zkevm_rpc_http_port: 8123
  zkevm_rpc_ws_port: 8133
  zkevm_bridge_rpc_port: 8080
  zkevm_bridge_grpc_port: 9090
  zkevm_bridge_ui_port: 80
  zkevm_agglayer_port: 4444
  zkevm_dac_port: 8484
  zkevm_pool_manager_port: 8545

  # Addresses and private keys of the different components.
  # They have been generated using the following command:
  # polycli wallet inspect --mnemonic 'lab code glass agree maid neutral vessel horror deny frequent favorite soft gate galaxy proof vintage once figure diary virtual scissors marble shrug drop' --addresses 9 | tee keys.txt | jq -r '.Addresses[] | [.ETHAddress, .HexPrivateKey] | @tsv' | awk 'BEGIN{split("sequencer,aggregator,claimtxmanager,timelock,admin,loadtest,agglayer,dac,proofsigner",roles,",")} {print "zkevm_l2_" roles[NR] "_address: \"" $1 "\""; print "zkevm_l2_" roles[NR] "_private_key: \"0x" $2 "\"\n"}'
  zkevm_l2_sequencer_address: "0xe7b10316beC44750C51FAcd4bE04A605fCf3b33e"
  zkevm_l2_sequencer_private_key: "0xbfe4b6311b4bdc50b25d1d729c30d361c777b8e93e3d00d433b41a8a5b83807b"

  zkevm_l2_aggregator_address: "0x8C24465DAF1ef02bFAB710b823e2A1382Bc5f9e4"
  zkevm_l2_aggregator_private_key: "0x8a50c37e093fadad4e6ce7336e4f9a1f4fd98bd9f0c9c9d2a81b8e634dbc69b3"

  zkevm_l2_claimtxmanager_address: "0x988c36f02EED09ac453CB8e1Ba82857594CA35EB"
  zkevm_l2_claimtxmanager_private_key: "0xda0250d2095698c829497c391aae1c66d1d3ba39d8e8a07864f833d1d367d722"

  zkevm_l2_timelock_address: "0x21FA1acD46482810d720b35B2B2091f01Fe3216c"
  zkevm_l2_timelock_private_key: "0x84837b3e10a7b591b24cfafae39493f7718c101748bea1f500853fa54a1226c2"

  zkevm_l2_admin_address: "0x7a62D41A20284ECB098BfC49ed8F774023Fb6F6C"
  zkevm_l2_admin_private_key: "0xe2d61b699bb85c6d05a047363033be432199682af3902ef0e21a9a79f42dd323"

  zkevm_l2_loadtest_address: "0x50993871Ed442c0724d6C6caD00cC7cbc8417473"
  zkevm_l2_loadtest_private_key: "0xce301d6d1561f8d0807add9afae3927658670c5f45bc7d9fb4cecb3ffe9f1030"

  zkevm_l2_agglayer_address: "0x4C45053503703590423a9F5D2D9Fcd3Ed917B434"
  zkevm_l2_agglayer_private_key: "0x2563ef53f543ba11050cecbd6b7c71f5e890c717f6d0e71d21a2393715c76f1e"

  zkevm_l2_dac_address: "0x9E9B04653f54d2693bEf9e0017B273505a802580"
  zkevm_l2_dac_private_key: "0x9c3feb6b3c706c229aa296f06183c7813fba29a2b41650c77a64eb7391c62a53"

  zkevm_l2_proofsigner_address: "0x05cD51ccb5C61d795b14a939E81E776FAd32645d"
  zkevm_l2_proofsigner_private_key: "0x005acbeac01994fe43198ba51063c7583fa27da86feeb2ba415b4b0769558672"

  # Keystore password.
  zkevm_l2_keystore_password: pSnv6Dh5s9ahuzGzH9RoCDrKAMddaX3m

  ## L1 configuration.
  l1_chain_id: 11155111
  l1_preallocated_mnemonic: minor news record pony wrap abstract kitten cool saddle maple song enroll           
  l1_funding_amount: 1ether 
  l1_rpc_url: https://eth-sepolia.g.alchemy.com/v2/DxcZ_thUfxPOadfylNPiHo7igT7lw1SP
  l1_ws_url: wss://eth-sepolia.g.alchemy.com/v2/DxcZ_thUfxPOadfylNPiHo7igT7lw1SP
  # https://github.com/kurtosis-tech/ethereum-package/tree/main?tab=readme-ov-file#configuration
  l1_additional_services: [
  # blockscout, # block explorer
  # dora, # beaconchain explorer  
  # el_forkmon, # fork monitor tool
  ]
  l1_preset: minimal
  l1_seconds_per_slot: 1

  ## Rollup configuration.

  # The chain id of the new rollup.
  zkevm_rollup_chain_id: 10101

  # The fork id of the new rollup. It indicates the prover (zkROM/executor) version.
  zkevm_rollup_fork_id: 9

  # If erigon is being used as the sequencer, this flag will enable a stateless executor to verify the execution of the batches.
  erigon_strict_mode: true

  # The address of the rollup manager contract on L1.
  # If specified, the rollup data will be retrieved from this contract instead of using the contracts service.
  # zkevm_rollup_manager_address: ""
  # # The block number at which the rollup manager contract was deployed.
  # zkevm_rollup_manager_block_number: 0
  # # The address of the global exit root contract on L2.
  # zkevm_global_exit_root_l2_address: ""
  # # The address of the Polygon data committee contract on L1.
  # polygon_data_committee_address: ""

  polygon_zkevm_explorer: https://explorer.private/
  l1_explorer_url: https://sepolia.etherscan.io/

  # If this is true, we will automatically deploy an ERC20 contract on
  # L1 to be used at the gasTokenAddress
  zkevm_use_gas_token_contract: false

  ## Permissionless node configuration.
  trusted_sequencer_node_uri: zkevm-node-sequencer-001:6900
  zkevm_aggregator_host: zkevm-node-aggregator-001
  genesis_file: templates/permissionless-node/genesis.json
